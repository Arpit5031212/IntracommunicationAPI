// <auto-generated />
using System;
using IntraCommunicationWebApi.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace IntraCommunicationWebApi.Migrations
{
    [DbContext(typeof(IntraCommunicationDatabaseContext))]
    [Migration("20230717214919_webApiDB")]
    partial class webApiDB
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("IntraCommunicationWebApi.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CommentID")
                        .UseIdentityColumn();

                    b.Property<string>("CommentDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CommentedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Commented_At");

                    b.Property<int>("CommentedBy")
                        .HasColumnType("int")
                        .HasColumnName("Commented_By");

                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    b.HasKey("CommentId");

                    b.HasIndex("CommentedBy");

                    b.HasIndex("PostId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GroupID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date")
                        .HasColumnName("Created_At");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Created_By");

                    b.Property<string>("GroupDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Group_Description");

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Group_Name");

                    b.Property<int>("GroupType")
                        .HasColumnType("int")
                        .HasColumnName("Group_Type");

                    b.HasKey("GroupId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex(new[] { "GroupName" }, "UK_Groups_Group_Name")
                        .IsUnique();

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.GroupInvitesRequest", b =>
                {
                    b.Property<int>("InviteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("InviteID")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Created_at");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int")
                        .HasColumnName("Created_by");

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit")
                        .HasColumnName("isAccepted");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("isApproved");

                    b.Property<int>("SentTo")
                        .HasColumnType("int")
                        .HasColumnName("Sent_to");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("Updated_at");

                    b.HasKey("InviteId");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("GroupId");

                    b.HasIndex("SentTo");

                    b.ToTable("Group_Invites_Requests");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.GroupMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .UseIdentityColumn();

                    b.Property<int>("GroupId")
                        .HasColumnType("int")
                        .HasColumnName("GroupID");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasColumnName("MemberID");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("MemberId");

                    b.ToTable("Group_Members");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.Like", b =>
                {
                    b.Property<int>("PostId")
                        .HasColumnType("int")
                        .HasColumnName("PostID");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasIndex("PostId");

                    b.HasIndex("UserId");

                    b.ToTable("Likes");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PostID")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime")
                        .HasColumnName("End_Time");

                    b.Property<string>("PostDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Post_Description");

                    b.Property<string>("PostType")
                        .IsRequired()
                        .HasMaxLength(1)
                        .IsUnicode(false)
                        .HasColumnType("char(1)")
                        .HasColumnName("Post_Type")
                        .IsFixedLength(true);

                    b.Property<DateTime>("PostedAt")
                        .HasColumnType("date");

                    b.Property<int>("PostedBy")
                        .HasColumnType("int");

                    b.Property<int>("PostedOnGroup")
                        .HasColumnType("int")
                        .HasColumnName("Posted_On_Group");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime")
                        .HasColumnName("Start_Time");

                    b.Property<string>("Url")
                        .HasColumnType("text")
                        .HasColumnName("URL");

                    b.HasKey("PostId");

                    b.HasIndex("PostedBy");

                    b.HasIndex("PostedOnGroup");

                    b.ToTable("Posts");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.UserProfile", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UserID")
                        .UseIdentityColumn();

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("AddressLine2")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Contact")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("Dob")
                        .HasColumnType("date")
                        .HasColumnName("DOB");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("First_Name");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("Last_Name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(64)
                        .IsUnicode(false)
                        .HasColumnType("varchar(64)");

                    b.Property<string>("PermanentCity")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("PermanentState")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)");

                    b.HasKey("UserId");

                    b.HasIndex(new[] { "Contact" }, "UK_User_Profile_Contact")
                        .IsUnique();

                    b.HasIndex(new[] { "Email" }, "UK_User_Profile_Email")
                        .IsUnique();

                    b.ToTable("User_Profile");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.Comment", b =>
                {
                    b.HasOne("IntraCommunicationWebApi.Models.UserProfile", "CommentedByNavigation")
                        .WithMany("Comments")
                        .HasForeignKey("CommentedBy")
                        .HasConstraintName("FK_Comments_Commented_By")
                        .IsRequired();

                    b.HasOne("IntraCommunicationWebApi.Models.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Comments_PostID")
                        .IsRequired();

                    b.Navigation("CommentedByNavigation");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.Group", b =>
                {
                    b.HasOne("IntraCommunicationWebApi.Models.UserProfile", "CreatedByNavigation")
                        .WithMany("Groups")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Groups_Created_By")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.GroupInvitesRequest", b =>
                {
                    b.HasOne("IntraCommunicationWebApi.Models.UserProfile", "CreatedByNavigation")
                        .WithMany("GroupInvitesRequestCreatedByNavigations")
                        .HasForeignKey("CreatedBy")
                        .HasConstraintName("FK_Group_Invites_Requests_Created_by")
                        .IsRequired();

                    b.HasOne("IntraCommunicationWebApi.Models.Group", "Group")
                        .WithMany("GroupInvitesRequests")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Group_Invites_Requests_GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntraCommunicationWebApi.Models.UserProfile", "SentToNavigation")
                        .WithMany("GroupInvitesRequestSentToNavigations")
                        .HasForeignKey("SentTo")
                        .HasConstraintName("FK_Group_Invites_Requests_Sent_to")
                        .IsRequired();

                    b.Navigation("CreatedByNavigation");

                    b.Navigation("Group");

                    b.Navigation("SentToNavigation");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.GroupMember", b =>
                {
                    b.HasOne("IntraCommunicationWebApi.Models.Group", "Group")
                        .WithMany("GroupMembers")
                        .HasForeignKey("GroupId")
                        .HasConstraintName("FK_Group_Members_GroupID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("IntraCommunicationWebApi.Models.UserProfile", "Member")
                        .WithMany("GroupMembers")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Group_Members_MemberID")
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.Like", b =>
                {
                    b.HasOne("IntraCommunicationWebApi.Models.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .HasConstraintName("FK_Likes_PostID")
                        .IsRequired();

                    b.HasOne("IntraCommunicationWebApi.Models.UserProfile", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Likes_UserId")
                        .IsRequired();

                    b.Navigation("Post");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.Post", b =>
                {
                    b.HasOne("IntraCommunicationWebApi.Models.UserProfile", "PostedByNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("PostedBy")
                        .HasConstraintName("FK_Posts_PostedBy")
                        .IsRequired();

                    b.HasOne("IntraCommunicationWebApi.Models.Group", "PostedOnGroupNavigation")
                        .WithMany("Posts")
                        .HasForeignKey("PostedOnGroup")
                        .HasConstraintName("FK_Posts_Posted_On")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PostedByNavigation");

                    b.Navigation("PostedOnGroupNavigation");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.Group", b =>
                {
                    b.Navigation("GroupInvitesRequests");

                    b.Navigation("GroupMembers");

                    b.Navigation("Posts");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.Post", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("IntraCommunicationWebApi.Models.UserProfile", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("GroupInvitesRequestCreatedByNavigations");

                    b.Navigation("GroupInvitesRequestSentToNavigations");

                    b.Navigation("GroupMembers");

                    b.Navigation("Groups");

                    b.Navigation("Posts");
                });
#pragma warning restore 612, 618
        }
    }
}
